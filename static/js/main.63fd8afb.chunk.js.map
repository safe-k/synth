{"version":3,"sources":["Components/Keyboard.tsx","Components/Control/Effect/Parameter.tsx","Components/Control/Effect/Toggle.tsx","Components/Control/Effect/index.ts","Components/Control/Oscillator.tsx","Components/Synth.tsx","index.tsx","App.tsx"],"names":["Piano","require","Keyboard","props","firstNote","MidiNumbers","fromNote","lastNote","keyboardShortcuts","KeyboardShortcuts","create","keyboardConfig","HOME_ROW","noteRange","first","last","playNote","midiNumber","synth","triggerAttack","Math","pow","calculateMidiNoteFrequency","stopNote","triggerRelease","width","Parameter","initialValue","action","Slider","defaultValue","valueLabelDisplay","step","min","max","onChange","event","value","Toggle","React","useState","selected","setSelected","ToggleButton","size","Typography","text","pitchShift","Tone","PitchShift","wet","filter","AutoWah","distortion","Distortion","effects","name","object","adjective","Oscillator","type","setType","ToggleButtonGroup","exclusive","oscillator","fontSize","useStyles","makeStyles","theme","createStyles","root","display","maxWidth","justifyContent","alignItems","paper","padding","spacing","textAlign","color","palette","secondary","effectsChain","Object","entries","map","MonoSynth","chain","Master","Synth","titleAdjectiveString","setTitleAdjectiveString","titleAdjectives","classes","updateAdjective","active","values","join","className","Grid","container","justify","item","xs","Paper","Number","pitch","sensitivity","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.63fd8afb.chunk.js","sourcesContent":["import React from 'react';\nimport Tone from \"tone\";\nimport 'react-piano/dist/styles.css';\nimport './Keyboard.css';\n\nconst Piano = require(\"react-piano\");\n\ninterface Props {\n    synth: Tone.MonoSynth\n}\n\nexport const Keyboard = (props: Props) => {\n    const firstNote = Piano.MidiNumbers.fromNote('c2');\n    const lastNote = Piano.MidiNumbers.fromNote('f3');\n    const keyboardShortcuts = Piano.KeyboardShortcuts.create({\n        firstNote: firstNote,\n        lastNote: lastNote,\n        keyboardConfig: Piano.KeyboardShortcuts.HOME_ROW,\n    });\n\n    const calculateMidiNoteFrequency = (midiNumber: number) => Math.pow(2, (midiNumber - 69) / 12) * 440;\n\n    return (\n        <Piano.Piano\n            noteRange={{first: firstNote, last: lastNote}}\n            playNote={(midiNumber: number) => props.synth.triggerAttack(calculateMidiNoteFrequency(midiNumber))}\n            stopNote={(midiNumber: number) => props.synth.triggerRelease()}\n            width={700}\n            keyboardShortcuts={keyboardShortcuts}\n        />\n    );\n};\n","import React from 'react';\nimport Slider from '@material-ui/core/Slider';\n\ninterface Props {\n    initialValue?: number\n    step?: number\n    max?: number\n    min?: number\n    action: (value: number) => void\n}\n\nexport const Parameter = (props: Props) => {\n    const initialValue = props.initialValue ?? 5;\n    props.action(initialValue);\n\n    return (\n        <div>\n            <Slider\n                defaultValue={initialValue}\n                valueLabelDisplay=\"auto\"\n                step={props.step ?? 1}\n                min={props.min ?? 0}\n                max={props.max ?? 30}\n                onChange={(event, value) => props.action(value as number)}\n            />\n        </div>\n    );\n};\n","import React from 'react';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport Typography from '@material-ui/core/Typography';\n\ninterface Props {\n    text: string\n    action: (selected: boolean) => void\n}\n\nexport const Toggle = (props: Props) => {\n    const [selected, setSelected] = React.useState(false);\n\n    return (\n        <ToggleButton\n            size=\"small\"\n            value=\"check\"\n            selected={selected}\n            onChange={() => {\n                const value = !selected;\n\n                setSelected(value);\n                props.action(value);\n            }}\n        >\n            <Typography>{props.text}</Typography>\n        </ToggleButton>\n    );\n};\n","import Tone from \"tone\";\n\nexport { Parameter } from \"./Parameter\";\nexport { Toggle } from \"./Toggle\";\n\nconst pitchShift = new Tone.PitchShift();\npitchShift.wet.value = 0;\n\nconst filter = new Tone.AutoWah();\nfilter.wet.value = 0;\n\nconst distortion = new Tone.Distortion();\ndistortion.wet.value = 0;\n\nexport const effects = {\n    pitchShift: {\n        name: 'Sass',\n        object: pitchShift,\n        adjective: 'Bad'\n    },\n    filter: {\n        name: 'Wob',\n        object: filter,\n        adjective: 'Rad'\n    },\n    distortion: {\n        name: '$*ยก%',\n        object: distortion,\n        adjective: 'Mad'\n    }\n};\n","import React from \"react\";\nimport Tone from \"tone\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport SquareFootIcon from '@material-ui/icons/SquareFoot';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\n\nexport const defaultType = 'sawtooth';\n\ninterface Props {\n    synth: Tone.MonoSynth\n}\n\nexport const Oscillator = (props: Props) => {\n    const [type, setType] = React.useState(defaultType);\n\n    return (\n        <ToggleButtonGroup\n            value={type}\n            exclusive\n            onChange={(event, value) => {\n                setType(value);\n                props.synth.oscillator.type = value;\n            }}\n        >\n            <ToggleButton value={defaultType}>\n                <SquareFootIcon fontSize=\"small\"/>\n            </ToggleButton>\n            <ToggleButton value=\"square\">\n                <CheckBoxOutlineBlankIcon fontSize=\"small\"/>\n            </ToggleButton>\n            <ToggleButton value=\"sine8\">\n                <RadioButtonUncheckedIcon fontSize=\"small\"/>\n            </ToggleButton>\n        </ToggleButtonGroup>\n    );\n};\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Tone from \"tone\";\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Keyboard } from './Keyboard';\nimport { Oscillator, Toggle, Parameter, effects } from './Control';\nimport { defaultType } from \"./Control/Oscillator\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            maxWidth: 700,\n            justifyContent: 'center',\n            alignItems: 'center'\n        },\n        synth: {\n            'background-color': 'indianred',\n            'box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\n        },\n        paper: {\n            padding: theme.spacing(2),\n            textAlign: 'center',\n            color: theme.palette.text.secondary,\n            'background-color': 'bisque'\n        }\n    }),\n);\n\nconst effectsChain = Object.entries(effects).map(([name, effect]) => effect.object);\nconst synth = new Tone.MonoSynth({oscillator: {type: defaultType}}).chain(...effectsChain, Tone.Master);\n\nexport const Synth = () => {\n    const titleDelimiter = \" \";\n    const [titleAdjectiveString, setTitleAdjectiveString] = React.useState(titleDelimiter);\n    const [titleAdjectives]: [{ [effect: string]: string }, any] = React.useState({});\n\n    const classes = useStyles();\n    const updateAdjective = (adjective: string, active: boolean) => {\n        titleAdjectives[adjective] = active ? adjective : \"\";\n        setTitleAdjectiveString(titleDelimiter + Object.values(titleAdjectives).join(titleDelimiter) + titleDelimiter);\n    };\n\n    return (\n        <div className={classes.root}>\n            <Grid className={classes.synth} container spacing={2} alignItems=\"center\" justify=\"center\">\n                <Grid item xs={12}>\n                    <Paper className={classes.paper}>My{titleAdjectiveString || titleDelimiter}Synth</Paper>\n                </Grid>\n                <Grid container item xs={3} alignItems=\"center\" justify=\"center\">\n                    <Grid item xs={12}>\n                        <Oscillator synth={synth}/>\n                    </Grid>\n                </Grid>\n                <Grid container item xs={3} alignItems=\"center\" justify=\"center\">\n                    <Grid item xs={6}>\n                        <Toggle\n                            text={effects.pitchShift.name}\n                            action={(selected => {\n                                effects.pitchShift.object.wet.value = Number(selected);\n                                updateAdjective(effects.pitchShift.adjective, selected);\n                            })}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Parameter\n                            action={value => effects.pitchShift.object.pitch = value}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid container item xs={3} alignItems=\"center\" justify=\"center\">\n                    <Grid item xs={6}>\n                        <Toggle\n                            text={effects.filter.name}\n                            action={(selected => {\n                                effects.filter.object.wet.value = Number(selected);\n                                updateAdjective(effects.filter.adjective, selected);\n                            })}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Parameter\n                            max={50}\n                            action={value => effects.filter.object.sensitivity = value}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid container item xs={3} alignItems=\"center\" justify=\"center\">\n                    <Grid item xs={6}>\n                        <Toggle\n                            text={effects.distortion.name}\n                            action={(selected => {\n                                effects.distortion.object.wet.value = Number(selected);\n                                updateAdjective(effects.distortion.adjective, selected);\n                            })}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Parameter\n                            initialValue={1}\n                            max={10}\n                            action={value => effects.distortion.object.distortion = value}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} alignItems=\"center\" justify=\"center\">\n                    <Keyboard synth={synth}/>\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n","import React from 'react';\nimport './App.css';\nimport { Synth } from \"./Components/Synth\";\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Synth/>\n            </header>\n        </div>\n    );\n};\n"],"sourceRoot":""}